'use client';

import { useState } from 'react';
import { useWallet } from '@/contexts/WalletContext';
import { useJobs } from '@/contexts/JobContext';
import { useDisputes } from '@/contexts/DisputeContext';
import { JobStatus } from '@/lib/stellar';
import CreateJobSection from './CreateJobSection';
import PendingReleases from './PendingReleases';

export default function ClientDashboard() {
    const { publicKey } = useWallet();
    const { jobs, updateJobStatus } = useJobs();
    const { addDispute, disputes } = useDisputes();
    const [evidenceText, setEvidenceText] = useState<Record<string, string>>({});

    const myJobs = jobs.filter((job) => job.client === publicKey);
    const pendingJobs = myJobs.filter((j) => j.status === JobStatus.PENDING);
    const completedJobs = myJobs.filter((j) => j.status === JobStatus.COMPLETED);
    const approvedJobs = myJobs.filter((j) => j.status === JobStatus.APPROVED);
    const disputedJobs = myJobs.filter((j) => j.status === JobStatus.DISPUTED);

    const totalSpent = approvedJobs.reduce((sum, job) => sum + parseFloat(job.amount), 0);
    const lockedFunds = [...pendingJobs, ...completedJobs, ...disputedJobs].reduce(
        (sum, job) => sum + parseFloat(job.amount),
        0
    );

    const handleApprove = async (job: any) => {
        if (!confirm(`Release ${job.amount} XLM to freelancer?`)) {
            return;
        }

        try {
            if (job.escrowAccount) {
                const escrowSecret = localStorage.getItem(`escrow_${job.id}`);
                if (escrowSecret) {
                    const { releaseEscrowFunds } = await import('@/lib/escrow');
                    const txHash = await releaseEscrowFunds(
                        job.escrowAccount,
                        escrowSecret,
                        job.freelancer
                    );
                    alert(`‚úÖ ${job.amount} XLM released!\n\nTransaction: ${txHash}`);
                }
            }
            updateJobStatus(job.id, JobStatus.APPROVED);
        } catch (error: any) {
            alert(`‚ùå Failed: ${error.message}`);
        }
    };

    const handleReject = (job: any) => {
        const evidence = evidenceText[job.id] || '';
        if (!evidence.trim()) {
            alert('Please provide evidence for rejection');
            return;
        }

        updateJobStatus(job.id, JobStatus.DISPUTED);
        addDispute({
            jobId: job.id,
            jobDescription: job.description,
            jobAmount: job.amount,
            client: job.client,
            freelancer: job.freelancer,
            clientEvidence: evidence,
            freelancerEvidence: '',
        });

        alert('Dispute raised! DAO arbitrators will review your case.');
        setEvidenceText((prev) => ({ ...prev, [job.id]: '' }));
    };

    return (
        <div className="min-h-full p-8">
            <div className="max-w-7xl mx-auto">
                {/* Header */}
                <div className="dark-card rounded-2xl shadow-2xl p-8 mb-8">
                    <div className="flex items-center justify-between">
                        <div>
                            <h1 className="text-4xl font-bold text-white mb-2">
                                Client Dashboard
                            </h1>
                            <p className="text-white">Manage your projects and payments</p>
                        </div>
                        <div className="text-right">
                            <p className="text-sm text-gray-500">Total Spent</p>
                            <p className="text-4xl font-bold text-blue-600">{totalSpent.toFixed(2)} XLM</p>
                        </div>
                    </div>
                </div>

                {/* Stats */}
                <div className="grid grid-cols-4 gap-6 mb-8">
                    <div className="dark-card rounded-xl shadow-xl p-6">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-gray-500 text-sm">Active Projects</p>
                                <p className="text-3xl font-bold text-blue-600">{pendingJobs.length}</p>
                            </div>
                            <div className="text-4xl">üìã</div>
                        </div>
                    </div>
                    <div className="dark-card rounded-xl shadow-xl p-6">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-gray-500 text-sm">Pending Review</p>
                                <p className="text-3xl font-bold text-yellow-600">{completedJobs.length}</p>
                            </div>
                            <div className="text-4xl">üëÄ</div>
                        </div>
                    </div>
                    <div className="dark-card rounded-xl shadow-xl p-6">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-gray-500 text-sm">Locked Funds</p>
                                <p className="text-3xl font-bold text-orange-600">{lockedFunds.toFixed(2)} XLM</p>
                            </div>
                            <div className="text-4xl">üîí</div>
                        </div>
                    </div>
                    <div className="dark-card rounded-xl shadow-xl p-6">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-gray-500 text-sm">Disputes</p>
                                <p className="text-3xl font-bold text-red-600">{disputedJobs.length}</p>
                            </div>
                            <div className="text-4xl">‚öñÔ∏è</div>
                        </div>
                    </div>
                </div>

                {/* Create Job Section */}
                <CreateJobSection />

                {/* Active Projects */}
                <div className="mb-8">
                    <h2 className="text-2xl font-bold text-white mb-4">üìã Active Projects</h2>
                    <div className="grid gap-4">
                        {pendingJobs.map((job) => (
                            <div key={job.id} className="dark-card rounded-xl shadow-xl p-6">
                                <div className="flex justify-between items-start">
                                    <div>
                                        <h3 className="text-xl font-semibold text-gray-900">{job.description}</h3>
                                        <p className="text-sm text-gray-500">Job #{job.id.slice(-8)}</p>
                                        <p className="text-sm text-gray-600 mt-2">
                                            Freelancer: {job.freelancer.slice(0, 8)}...{job.freelancer.slice(-8)}
                                        </p>
                                    </div>
                                    <div className="text-right">
                                        <p className="text-2xl font-bold text-blue-600">{job.amount} XLM</p>
                                        <span className="inline-block px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium">
                                            IN PROGRESS
                                        </span>
                                    </div>
                                </div>
                            </div>
                        ))}
                        {pendingJobs.length === 0 && (
                            <div className="dark-card rounded-xl shadow-xl p-12 text-center">
                                <p className="text-gray-500 text-lg">No active projects üìù</p>
                            </div>
                        )}
                    </div>
                </div>

                {/* Pending Review */}
                <div className="mb-8">
                    <h2 className="text-2xl font-bold text-white mb-4">üëÄ Pending Your Review</h2>
                    <div className="grid gap-4">
                        {completedJobs.map((job) => (
                            <div key={job.id} className="dark-card rounded-xl shadow-xl p-6 border-2 border-yellow-700/50">
                                <div className="flex justify-between items-start mb-4">
                                    <div>
                                        <h3 className="text-xl font-semibold text-gray-900">{job.description}</h3>
                                        <p className="text-sm text-yellow-600 font-medium">‚è≥ Freelancer marked as completed</p>
                                    </div>
                                    <div className="text-right">
                                        <p className="text-2xl font-bold text-yellow-600">{job.amount} XLM</p>
                                        <span className="inline-block px-3 py-1 bg-yellow-100 text-yellow-800 rounded-full text-sm font-medium">
                                            REVIEW NEEDED
                                        </span>
                                    </div>
                                </div>

                                <div className="border-t border-purple-900/50 pt-4">
                                    <div className="flex gap-3 mb-4">
                                        <button
                                            onClick={() => handleApprove(job)}
                                            className="flex-1 px-6 py-3 bg-gradient-to-r from-green-600 to-green-700 text-white rounded-lg hover:from-green-700 hover:to-green-800 transition font-semibold shadow-lg"
                                        >
                                            ‚úÖ Approve & Release Funds
                                        </button>
                                    </div>

                                    <div className="bg-purple-950/50 rounded-lg p-4 border border-purple-900/50">
                                        <p className="text-sm text-gray-300 mb-2 font-medium">
                                            Not satisfied? Provide evidence and raise dispute:
                                        </p>
                                        <textarea
                                            value={evidenceText[job.id] || ''}
                                            onChange={(e) =>
                                                setEvidenceText((prev) => ({ ...prev, [job.id]: e.target.value }))
                                            }
                                            placeholder="Explain why work is unsatisfactory (provide screenshots, requirements not met...)"
                                            className="w-full px-4 py-2 bg-gray-800/50 border border-purple-800/50 text-white rounded-lg mb-3 focus:ring-2 focus:ring-red-500 focus:border-transparent placeholder-gray-500"
                                            rows={3}
                                        />
                                        <button
                                            onClick={() => handleReject(job)}
                                            className="px-6 py-2 bg-gradient-to-r from-red-600 to-red-700 text-white rounded-lg hover:from-red-700 hover:to-red-800 transition font-semibold shadow-lg"
                                        >
                                            ‚öñÔ∏è Reject & Raise Dispute
                                        </button>
                                    </div>
                                </div>
                            </div>
                        ))}
                        {completedJobs.length === 0 && (
                            <div className="dark-card rounded-xl shadow-xl p-12 text-center">
                                <p className="text-gray-500 text-lg">No jobs pending review üìã</p>
                            </div>
                        )}
                    </div>
                </div>

                {/* Disputed Jobs */}
                {disputedJobs.length > 0 && (
                    <div className="mb-8">
                        <h2 className="text-2xl font-bold text-gray-900 mb-4">‚öñÔ∏è Disputed Jobs</h2>
                        <div className="grid gap-4">
                            {disputedJobs.map((job) => {
                                const dispute = disputes.find((d) => d.jobId === job.id);
                                return (
                                    <div key={job.id} className="bg-red-900/30 border-2 border-red-700/50 rounded-xl shadow-xl p-6 backdrop-blur-lg">
                                        <div className="flex justify-between items-start mb-4">
                                            <div>
                                                <h3 className="text-xl font-semibold text-gray-900">{job.description}</h3>
                                                <p className="text-sm text-red-600">Under DAO arbitration</p>
                                            </div>
                                            <div className="text-right">
                                                <p className="text-2xl font-bold text-red-600">{job.amount} XLM</p>
                                                <span className="inline-block px-3 py-1 bg-red-200 text-red-900 rounded-full text-sm font-medium">
                                                    DISPUTED
                                                </span>
                                            </div>
                                        </div>
                                        {dispute && (
                                            <div className="bg-purple-950/50 rounded-lg p-4 border border-purple-900/50">
                                                <p className="text-sm text-gray-600 mb-2">
                                                    <strong>Your Evidence:</strong> {dispute.clientEvidence}
                                                </p>
                                                <p className="text-sm text-gray-600">
                                                    <strong>Votes:</strong> {dispute.votes.length}/3 arbitrators voted
                                                </p>
                                                {dispute.status === 'RESOLVED' && (
                                                    <p className="text-sm font-bold text-green-600 mt-2">
                                                        ‚úÖ Resolved in favor of: {dispute.winner}
                                                    </p>
                                                )}
                                            </div>
                                        )}
                                    </div>
                                );
                            })}
                        </div>
                    </div>
                )}

                {/* Completed Projects */}
                {approvedJobs.length > 0 && (
                    <div className="mb-8">
                        <h2 className="text-2xl font-bold text-gray-900 mb-4">‚úÖ Completed Projects</h2>
                        <div className="grid gap-4">
                            {approvedJobs.slice(0, 5).map((job) => (
                                <div key={job.id} className="bg-green-50 border border-green-200 rounded-xl p-4">
                                    <div className="flex justify-between items-center">
                                        <div>
                                            <h3 className="font-semibold text-gray-900">{job.description}</h3>
                                            <p className="text-sm text-gray-500">
                                                {new Date(job.createdAt).toLocaleDateString()}
                                            </p>
                                        </div>
                                        <p className="text-xl font-bold text-green-600">{job.amount} XLM</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}
