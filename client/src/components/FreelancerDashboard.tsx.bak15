'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import { useWallet } from '@/contexts/WalletContext';
import { useJobs } from '@/contexts/JobContext';
import { useDisputes } from '@/contexts/DisputeContext';
import { JobStatus } from '@/lib/stellar';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';

const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
        opacity: 1,
        transition: {
            staggerChildren: 0.1
        }
    }
};

const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
        opacity: 1,
        y: 0,
        transition: { duration: 0.5 }
    }
};

export default function FreelancerDashboard() {
    const { publicKey } = useWallet();
    const { jobs, updateJobStatus } = useJobs();
    const { addDispute, disputes } = useDisputes();
    const [evidenceText, setEvidenceText] = useState<Record<string, string>>({});

    const myJobs = jobs.filter((job) => job.freelancer === publicKey);
    const activeJobs = myJobs.filter((j) => j.status === JobStatus.PENDING);
    const completedJobs = myJobs.filter((j) => j.status === JobStatus.COMPLETED);
    const approvedJobs = myJobs.filter((j) => j.status === JobStatus.APPROVED);
    const disputedJobs = myJobs.filter((j) => j.status === JobStatus.DISPUTED);

    const totalEarned = approvedJobs.reduce((sum, job) => sum + parseFloat(job.amount), 0);

    const handleComplete = (jobId: string) => {
        updateJobStatus(jobId, JobStatus.COMPLETED);
    };

    const handleRaiseDispute = (job: any) => {
        const evidence = evidenceText[job.id] || '';
        if (!evidence.trim()) {
            alert('Please provide evidence for the dispute');
            return;
        }

        updateJobStatus(job.id, JobStatus.DISPUTED);
        addDispute({
            jobId: job.id,
            jobDescription: job.description,
            jobAmount: job.amount,
            client: job.client,
            freelancer: job.freelancer,
            clientEvidence: '',
            freelancerEvidence: evidence,
        });

        alert('Dispute raised! DAO arbitrators will review your case.');
        setEvidenceText((prev) => ({ ...prev, [job.id]: '' }));
    };

    return (
        <motion.div
            className="min-h-full p-8"
            initial="hidden"
            animate="visible"
            variants={containerVariants}
        >
            <div className="max-w-7xl mx-auto space-y-8">
                {/* Header */}
                <motion.div variants={itemVariants}>
                    <Card className="bg-gradient-to-br from-purple-950/40 to-black/60 border-purple-900/50 backdrop-blur-lg">
                        <CardHeader>
                            <div className="flex items-center justify-between">
                                <div>
                                    <CardTitle className="text-4xl font-bold text-white flex items-center gap-3">
                                        <span>üíº</span>
                                        Freelancer Dashboard
                                    </CardTitle>
                                    <CardDescription className="text-gray-300 text-base mt-2">
                                        Manage your gigs and earnings
                                    </CardDescription>
                                </div>
                                <div className="text-right">
                                    <p className="text-sm text-gray-400">Total Earned</p>
                                    <p className="text-4xl font-bold text-green-400">{totalEarned.toFixed(2)} XLM</p>
                                </div>
                            </div>
                        </CardHeader>
                    </Card>
                </motion.div>

                {/* Stats */}
                <motion.div
                    className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6"
                    variants={containerVariants}
                >
                    <motion.div variants={itemVariants} whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                        <Card className="bg-gradient-to-br from-purple-950/40 to-black/60 border-purple-900/50 backdrop-blur-lg">
                            <CardContent className="p-6">
                                <div className="flex items-center justify-between">
                                    <div>
                                        <p className="text-gray-400 text-sm">Active Jobs</p>
                                        <p className="text-3xl font-bold text-blue-400">{activeJobs.length}</p>
                                    </div>
                                    <div className="text-4xl">üöÄ</div>
                                </div>
                            </CardContent>
                        </Card>
                    </motion.div>
                    <motion.div variants={itemVariants} whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                        <Card className="bg-gradient-to-br from-purple-950/40 to-black/60 border-purple-900/50 backdrop-blur-lg">
                            <CardContent className="p-6">
                                <div className="flex items-center justify-between">
                                    <div>
                                        <p className="text-gray-400 text-sm">Pending Review</p>
                                        <p className="text-3xl font-bold text-yellow-400">{completedJobs.length}</p>
                                    </div>
                                    <div className="text-4xl">‚è≥</div>
                                </div>
                            </CardContent>
                        </Card>
                    </motion.div>
                    <motion.div variants={itemVariants} whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                        <Card className="bg-gradient-to-br from-purple-950/40 to-black/60 border-purple-900/50 backdrop-blur-lg">
                            <CardContent className="p-6">
                                <div className="flex items-center justify-between">
                                    <div>
                                        <p className="text-gray-400 text-sm">Completed</p>
                                        <p className="text-3xl font-bold text-green-400">{approvedJobs.length}</p>
                                    </div>
                                    <div className="text-4xl">‚úÖ</div>
                                </div>
                            </CardContent>
                        </Card>
                    </motion.div>
                    <motion.div variants={itemVariants} whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                        <Card className="bg-gradient-to-br from-purple-950/40 to-black/60 border-purple-900/50 backdrop-blur-lg">
                            <CardContent className="p-6">
                                <div className="flex items-center justify-between">
                                    <div>
                                        <p className="text-gray-400 text-sm">Disputes</p>
                                        <p className="text-3xl font-bold text-red-400">{disputedJobs.length}</p>
                                    </div>
                                    <div className="text-4xl">‚öñÔ∏è</div>
                                </div>
                            </CardContent>
                        </Card>
                    </motion.div>
                </motion.div>

                {/* Active Jobs */}
                <motion.div variants={itemVariants}>
                    <h2 className="text-2xl font-bold text-white mb-4 flex items-center gap-2">
                        <span>üöÄ</span>
                        Active Jobs
                    </h2>
                    <div className="space-y-4">
                        {activeJobs.map((job, index) => (
                            <motion.div
                                key={job.id}
                                initial={{ opacity: 0, x: -20 }}
                                animate={{ opacity: 1, x: 0 }}
                                transition={{ delay: index * 0.1 }}
                                whileHover={{ scale: 1.02 }}
                            >
                                <Card className="bg-gradient-to-br from-purple-950/40 to-black/60 border-purple-900/50 backdrop-blur-lg hover:bg-gray-800/80 transition-colors">
                                    <CardContent className="p-6">
                                        <div className="flex justify-between items-start mb-4">
                                            <div className="flex-1">
                                                <h3 className="text-xl font-semibold text-white mb-1">{job.description}</h3>
                                                <p className="text-sm text-gray-400">Job #{job.id.slice(-8)}</p>
                                            </div>
                                            <div className="text-right ml-4">
                                                <p className="text-2xl font-bold text-green-400 mb-2">{job.amount} XLM</p>
                                                <Badge className="bg-blue-900/50 text-blue-300 border-blue-700">
                                                    IN PROGRESS
                                                </Badge>
                                            </div>
                                        </div>
                                        <Button
                                            onClick={() => handleComplete(job.id)}
                                            className="w-full bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white"
                                        >
                                            ‚úÖ Mark as Completed
                                        </Button>
                                    </CardContent>
                                </Card>
                            </motion.div>
                        ))}
                        {activeJobs.length === 0 && (
                            <motion.div variants={itemVariants}>
                                <Card className="bg-gradient-to-br from-purple-950/40 to-black/60 border-purple-900/50 backdrop-blur-lg">
                                    <CardContent className="p-12 text-center">
                                        <p className="text-gray-400 text-lg">No active jobs. Time to find new gigs! üéØ</p>
                                    </CardContent>
                                </Card>
                            </motion.div>
                        )}
                    </div>
                </motion.div>

                {/* Pending Review */}
                <motion.div variants={itemVariants}>
                    <h2 className="text-2xl font-bold text-white mb-4 flex items-center gap-2">
                        <span>‚è≥</span>
                        Pending Client Review
                    </h2>
                    <div className="space-y-4">
                        {completedJobs.map((job, index) => (
                            <motion.div
                                key={job.id}
                                initial={{ opacity: 0, x: -20 }}
                                animate={{ opacity: 1, x: 0 }}
                                transition={{ delay: index * 0.1 }}
                            >
                                <Card className="bg-gradient-to-br from-purple-950/40 to-black/60 border-purple-900/50 backdrop-blur-lg">
                                    <CardContent className="p-6">
                                        <div className="flex justify-between items-start mb-4">
                                            <div className="flex-1">
                                                <h3 className="text-xl font-semibold text-white mb-1">{job.description}</h3>
                                                <p className="text-sm text-gray-400">Waiting for client approval...</p>
                                            </div>
                                            <div className="text-right ml-4">
                                                <p className="text-2xl font-bold text-yellow-400 mb-2">{job.amount} XLM</p>
                                                <Badge className="bg-yellow-900/50 text-yellow-300 border-yellow-700">
                                                    UNDER REVIEW
                                                </Badge>
                                            </div>
                                        </div>
                                        <div className="border-t border-purple-900/50 pt-4 space-y-3">
                                            <p className="text-sm text-gray-300">If client doesn't approve, raise a dispute:</p>
                                            <Textarea
                                                value={evidenceText[job.id] || ''}
                                                onChange={(e) => setEvidenceText((prev) => ({ ...prev, [job.id]: e.target.value }))}
                                                placeholder="Provide evidence (screenshots, messages, work samples...)"
                                                className="bg-purple-950/50 border-purple-800/50 text-white placeholder-gray-500"
                                                rows={3}
                                            />
                                            <Button
                                                onClick={() => handleRaiseDispute(job)}
                                                className="bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 text-white"
                                            >
                                                ‚öñÔ∏è Raise Dispute
                                            </Button>
                                        </div>
                                    </CardContent>
                                </Card>
                            </motion.div>
                        ))}
                        {completedJobs.length === 0 && (
                            <motion.div variants={itemVariants}>
                                <Card className="bg-gradient-to-br from-purple-950/40 to-black/60 border-purple-900/50 backdrop-blur-lg">
                                    <CardContent className="p-12 text-center">
                                        <p className="text-gray-400 text-lg">No jobs pending review üìã</p>
                                    </CardContent>
                                </Card>
                            </motion.div>
                        )}
                    </div>
                </motion.div>

                {/* Disputed Jobs */}
                {disputedJobs.length > 0 && (
                    <motion.div variants={itemVariants}>
                        <h2 className="text-2xl font-bold text-white mb-4 flex items-center gap-2">
                            <span>‚öñÔ∏è</span>
                            Disputed Jobs
                        </h2>
                        <div className="space-y-4">
                            {disputedJobs.map((job, index) => {
                                const dispute = disputes.find((d) => d.jobId === job.id);
                                return (
                                    <motion.div
                                        key={job.id}
                                        initial={{ opacity: 0, x: -20 }}
                                        animate={{ opacity: 1, x: 0 }}
                                        transition={{ delay: index * 0.1 }}
                                    >
                                        <Card className="bg-red-900/30 border-red-700/50 backdrop-blur-lg border-2">
                                            <CardContent className="p-6">
                                                <div className="flex justify-between items-start mb-4">
                                                    <div className="flex-1">
                                                        <h3 className="text-xl font-semibold text-white mb-1">{job.description}</h3>
                                                        <p className="text-sm text-red-400">Under DAO arbitration</p>
                                                    </div>
                                                    <div className="text-right ml-4">
                                                        <p className="text-2xl font-bold text-red-400 mb-2">{job.amount} XLM</p>
                                                        <Badge className="bg-red-900/50 text-red-300 border-red-700">
                                                            DISPUTED
                                                        </Badge>
                                                    </div>
                                                </div>
                                                {dispute && (
                                                    <div className="bg-purple-950/50 rounded-lg p-4 border border-purple-900/50 space-y-2">
                                                        <p className="text-sm text-gray-300">
                                                            <strong className="text-white">Your Evidence:</strong> {dispute.freelancerEvidence}
                                                        </p>
                                                        <p className="text-sm text-gray-300">
                                                            <strong className="text-white">Votes:</strong> {dispute.votes.length}/3 arbitrators voted
                                                        </p>
                                                    </div>
                                                )}
                                            </CardContent>
                                        </Card>
                                    </motion.div>
                                );
                            })}
                        </div>
                    </motion.div>
                )}
            </div>
        </motion.div>
    );
}
